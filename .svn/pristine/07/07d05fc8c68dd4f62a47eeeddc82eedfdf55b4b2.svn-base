package snake.game.objects;

import java.awt.Point;
import java.util.LinkedList;
import java.util.List;

import processing.core.PApplet;
import snake.game.ActionEnum;
import snake.game.OnAction;
import snake.game.OnDraw;
import snake.game.OnMove;

public class Schlange implements OnMove, OnDraw, OnAction {

	private List<Schlangenteil> schlange;
	private int laenge;
	private int direction;
	private Kopf kopf;
	private Schwanz schwanz;

	public Schlange() {
		laenge = 10;
		schlange = new LinkedList<Schlangenteil>();
		direction = 1;
		kopf = new Kopf(11, 3);

	}

	public void start() {
		int i;
		for (i = laenge - 1; i > 0; i--) {
			schlange.add(new Schlangenteil((i + 1), 3,Kopf.RECHTS,Kopf.LINKS));
		}
		schwanz = new Schwanz(Kopf.RECHTS, new Point(i, 3));
	}

	public void onDraw(PApplet window, float scale,int actual_tile_dimension ) {
		kopf.onDraw(window, scale,actual_tile_dimension);
		for (Schlangenteil teil : schlange) {
			teil.onDraw(window, scale,actual_tile_dimension);

		}
		schwanz.onDraw(window, scale,actual_tile_dimension);
	}

	public boolean onMove(int width, int height) {
		// System.out.println("First coord 1: x:" + kopf.xGeben() + " y:"+
		// kopf.yGeben());
		// System.out.println(width + " "+ height);
		if (kopf.canMove(direction, width, height)) {
			Schlangenteil t = schlange.get(0);
			schlange.add(0, new Schlangenteil(kopf.xGeben(), kopf.yGeben(),direction,-t.getStart_direction()));
			kopf.move(direction);
			Schlangenteil last = schlange.get(schlange.size()-1);
			schwanz.setPosition(last.getposition());
			schwanz.setDirection(last.getStart_direction());
			schlange.remove(schlange.size() - 1);
			// System.out.println("First coord 2: x:" + kopf.xGeben() + " y:"+
			// kopf.yGeben() + " true");
			return true;
		} else {
			return false;
		}

	}

	public int getDirection_relativetopoint (int this_x,int this_y,int other_x,int other_y){
		if(this_x>other_x){
			return Kopf.LINKS;
		}else if(this_x < other_x){
			return Kopf.RECHTS;
		}else if(this_y>other_y){
			return Kopf.OBEN;
		}else if (this_y<other_y){
			return Kopf.UNTEN;
		}
		return 0;
	}
	@Override
	public void onAction(ActionEnum action) {

		switch (action) {
		case LINKS:
			if (direction == Kopf.RECHTS) {
			} else {
				direction = Kopf.LINKS;
			}
			break;
		case RECHTS:
			if (direction == Kopf.LINKS) {
			} else {
				direction = Kopf.RECHTS;
			}
			break;
		case OBEN:
			if (direction == Kopf.UNTEN) {
			} else {
				direction = Kopf.OBEN;
			}
			break;
		case UNTEN:
			if (direction == Kopf.OBEN) {
			} else {
				direction = Kopf.UNTEN;
			}
			break;
		}
	}

}
