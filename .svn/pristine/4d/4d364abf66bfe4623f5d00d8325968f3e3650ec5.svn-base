package snake.game;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Point;
import java.awt.Window;

import javax.swing.JOptionPane;

import processing.core.PApplet;
import processing.core.PImage;
public class Spielfenster extends PApplet {
	private PImage background;
	public static final int standard_tile = 30;
	private Spiel spiel;
	//Höhe in Pixel
	private int height,width;
	private float scale;
	public Spielfenster(Spiel spiel,int height,int width) {
		super();
		this.spiel = spiel;
		this.height = height;
		this.width = width;
		float ratio = width/height;
		float gameratio = spiel.getWidth()/spiel.getHeight();
		if(ratio>gameratio){
			scale =  (height/spiel.getHeight())/(float)standard_tile;
		}else{
			scale =  (width/spiel.getWidth())/(float)standard_tile;
		}
		System.out.println("Skalierung: " +scale);
		//spiel.setHost(findWindow(Spielfenster.this));
	}
	private void loadRessources(){
		background = null;
	}
	@Override
	public void draw() {
		
		//super.draw();
		spiel.onDraw(this, scale,(int) (Spielfenster.standard_tile * scale));
		
	}

	@Override
	public void setup() {
		
		super.setup();
		this.loop();
		this.frameRate(30);
		this.colorMode(HSB);
		this.size(width,height);
		this.addKeyListener(spiel);
		setPreferredSize(new Dimension(500, 500));
		EventQueue.invokeLater(new Runnable() {
		     public void run() {
		    	//Dies muss in invokeLater geschehen, da sonst eventuell noch nicht alle Events abgearbeitet sind
		    	 Spielfenster.this.spiel.setHost(findWindow(Spielfenster.this));
		    	 findWindow(Spielfenster.this).pack();
		    	 
		    	 spiel.start();
		     }
		   });
		
		
	}
	public static Point kachel_nach_pixel (Point tile_point,float scale){
		Point r = new Point();
		r.setLocation((tile_point.x)*Spielfenster.standard_tile * scale+1,(tile_point.y)*Spielfenster.standard_tile * scale+1);
		return r;
	}
	 public static Window findWindow(Component c) {
		    if (c == null) {
		        return JOptionPane.getRootFrame();
		    } else if (c instanceof Window) {
		        return (Window) c;
		    } else {
		        return findWindow(c.getParent());
		    }
		}
}
