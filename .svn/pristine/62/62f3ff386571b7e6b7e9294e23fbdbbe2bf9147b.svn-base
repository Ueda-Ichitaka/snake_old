package snake.game;

import java.awt.Point;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Semaphore;

import processing.core.PApplet;
import snake.gui.GameOverForm;

public class Spiel implements OnDraw,KeyListener {
	public int getHeight() {
		return height;
	}

	public int getWidth() {
		return width;
	}

	private List<OnMove> moving_objects;
	private List<OnCollide> colliding_objects;
	private List<OnDraw> drawable;
	private List<OnAction> action_objects;
	private Semaphore drawwait;
	private Timer onMoveTimer;
	private int punkte=0;
	boolean gameover = false;
	// Breite Höhe in Kachelanzahl
	private int height, width;
	private Window host;
	public void setHost(Window host) {
		this.host = host;
	}

	public Spiel(List<Object> Objekte, int height, int width) {
		this.height = height;
		this.width = width;
		
		drawwait = new Semaphore(1);
		moving_objects = new ArrayList<OnMove>();
		colliding_objects = new ArrayList<OnCollide>();
		drawable = new ArrayList<OnDraw>();
		action_objects = new ArrayList<OnAction>();
		for (Object o : Objekte) {
			if (o instanceof OnMove) {
				moving_objects.add((OnMove) o);
			}
			if (o instanceof OnCollide) {
			
				colliding_objects.add((OnCollide) o);
			}
			if (o instanceof OnDraw) {
				drawable.add((OnDraw) o);
			}
			if (o instanceof OnAction){
				action_objects.add((OnAction) o);
			}
		}

		onMoveTimer = new Timer();
		
	}

	public void start(){
		onMoveTimer.scheduleAtFixedRate(new TimerTask() {

			@Override
			public void run() {
				try {
					drawwait.acquire();
					onMove();
					OnCollide();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally{
					drawwait.release();
				}
				

			}
		}, 100L, 500L);
	}
	@Override
	public void onDraw(PApplet window, float scale,int actual_tile_dimension) {
		
		try {
			drawwait.acquire();
			window.fill(50);
			window.rect(10, 10, 10, 10);
			for (OnDraw draw : drawable) {
				draw.onDraw(window, scale,actual_tile_dimension);
			}
			if (gameover) {
				window.fill(0);
				window.text("Game Over", 20, 20);

			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			drawwait.release();
		}
		
	}

	public void onMove() {
		for (OnMove om : moving_objects) {
			if (!om.onMove(height, height)) {
				endGame();
			}
		}
		punkte++;

	}

	public void OnCollide() {
		OnCollide[][] objects = new OnCollide[width][height];
		
		top: for (OnCollide oc : colliding_objects) {
			for (OnCollide cur_obj : oc.getobjects()) {
				Point p = cur_obj.getposition();
				OnCollide o = objects[p.x][p.y];
				if (o != null) {
					if(!oc.onCollide(o)||!o.onCollide(oc)){
						endGame();
						break top;
					}
					
				}
				objects[p.x][p.y] = oc;
			}
		}
		

	}

	
	private void endGame(){
		gameover = true;
		onMoveTimer.cancel();
		new GameOverForm(punkte);
		host.setVisible(false);
		host.dispose();
	}
	@Override
	public void keyPressed(KeyEvent arg0) {
		ActionEnum action = null;
		switch(arg0.getKeyCode()){
		case KeyEvent.VK_LEFT:
			action = ActionEnum.LINKS;
			break;
		case KeyEvent.VK_UP:
			action = ActionEnum.OBEN;
			break;
		case KeyEvent.VK_DOWN:
			action = ActionEnum.UNTEN;
			break;
		case KeyEvent.VK_RIGHT:
			action = ActionEnum.RECHTS;
			break;
		default:
			return;
		}
		
		for (OnAction o : action_objects){
			o.onAction(action);
		}
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

}
