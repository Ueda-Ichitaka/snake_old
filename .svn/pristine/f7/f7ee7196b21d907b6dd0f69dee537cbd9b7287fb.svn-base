package snake.game.objects;

import java.util.LinkedList;
import java.util.List;

import processing.core.PApplet;
import snake.game.ActionEnum;
import snake.game.OnAction;
import snake.game.OnDraw;
import snake.game.OnMove;

public class Schlange implements OnMove, OnDraw, OnAction {

	private List<Schlangenteil> schlange;
	private int laenge;
	private int direction;
	private Kopf kopf;
	

	public Schlange() {
		laenge = 10;
		schlange = new LinkedList<Schlangenteil>();
		direction = 1;
		kopf = new Kopf(11,3);
	}

	public void start() {
		for (int i = laenge-1; i > 0; i--) {
			schlange.add(new Schlangenteil((i + 1), 3));
		}
	}

	public void onDraw(PApplet window, float scale) {
		kopf.onDraw(window, scale);
		for (Schlangenteil teil : schlange) {
			teil.onDraw(window, scale);

		}
	}

	public boolean onMove(int width, int height) {
		//System.out.println("First coord 1: x:" + kopf.xGeben() + " y:"+ kopf.yGeben());
		System.out.println(width + " "+ height);
		if(kopf.canMove(direction, width, height))
		{
			
		schlange.add(1, new Schlangenteil(kopf.xGeben(), kopf.yGeben()));
		kopf.move(direction);
		
		schlange.remove(schlange.size()-1);
		System.out.println("First coord 2: x:" + kopf.xGeben() + " y:"+ kopf.yGeben() + " true");
		return true;
		}
		else
		{
			return false;		
		}

	}

	@Override
	public void onAction(ActionEnum action) {
		
		switch (action) {
		case LINKS:
			if(direction == Kopf.RECHTS){}
			else{
			direction = 2;}
			break;
		case RECHTS:
			if(direction == Kopf.LINKS){}
			else{
			direction = 1;}
			break;
		case OBEN:
			if(direction == Kopf.UNTEN){}
			else{
			direction = 3;}
			break;
		case UNTEN:
			if(direction == Kopf.OBEN){}
			else{
			direction = 4;}
			break;
		}
	}

}
